gx_f_spline_params = rep(0, no.basis*no.basis), gx_m_spline_params = rep(0, no.basis*no.basis),
log_lambda_tp = 1,
log_lambda_tp_0_inflated_sd = 0.3,
tp_params = rep(0,15),
log_dispersion_f = 1.3, log_dispersion_m = 1.3,
log_phi_f_spline_params = rep(0, no.basis), log_phi_m_spline_params = rep(0, no.basis),
log_psi_f_spline_params = rep(0, no.basis), log_psi_m_spline_params = rep(0, no.basis),
log_lambda_f_spline_params = rep(log(init_lambda_f), no.basis), log_lambda_m_spline_params = rep(log(init_lambda_m), no.basis),
log_delta_f_spline_params = rep(log(init_delta_f), no.basis), log_delta_m_spline_params = rep(log(init_delta_m), no.basis),
log_epsilon_f_spline_params = rep(log(init_epsilon_f), no.basis), log_epsilon_m_spline_params = rep(log(init_epsilon_m), no.basis),
#log_lambda_f_spline_params = rep(0, no.basis), log_lambda_m_spline_params = rep(0, no.basis),
#log_delta_f_spline_params = rep(0, no.basis), log_delta_m_spline_params = rep(0, no.basis),
#log_epsilon_f_spline_params = rep(0, no.basis), log_epsilon_m_spline_params = rep(0, no.basis),
log_A_f_spline_params = rep(0, no.basis), log_A_m_spline_params = rep(0, no.basis),
log_B_f_spline_params = rep(0, no.basis), log_B_m_spline_params = rep(0, no.basis),
log_marginal_prec_phi_f = prec.init, log_marginal_prec_phi_m = prec.init,
log_marginal_prec_psi_f = prec.init, log_marginal_prec_psi_m = prec.init,
log_marginal_prec_A_f = prec.init, log_marginal_prec_A_m = prec.init,
log_marginal_prec_B_f = prec.init, log_marginal_prec_B_m = prec.init,
log_lambda_phi_f = lambda.init, log_lambda_phi_m = lambda.init,
log_lambda_psi_f = lambda.init, log_lambda_psi_m = lambda.init,
log_lambda_lambda_f = lambda.init, log_lambda_lambda_m = lambda.init,
log_lambda_delta_f = lambda.init, log_lambda_delta_m = lambda.init,
log_lambda_epsilon_f = lambda.init, log_lambda_epsilon_m = lambda.init,
log_lambda_A_f = lambda.init, log_lambda_A_m = lambda.init,
log_lambda_B_f = lambda.init, log_lambda_B_m = lambda.init,
logit_lambda_slope_rho_f = 1, logit_lambda_slope_rho_m = 1,
logit_delta_slope_rho_f = 1, logit_delta_slope_rho_m = 1,
logit_epsilon_slope_rho_f = 1, logit_epsilon_slope_rho_m = 1
#log_lambda_f_intercept = log(init_lambda_f), log_lambda_m_intercept = log(init_lambda_m),
#log_delta_f_intercept = log(init_delta_f), log_delta_m_intercept = log(init_delta_m),
#log_epsilon_f_intercept = log(init_epsilon_f), log_epsilon_m_intercept = log(init_epsilon_m),
#log_lambda_f_slope = 0, log_lambda_m_slope = 0,
#log_delta_f_slope = 0, log_delta_m_slope = 0,
#log_epsilon_f_slope = 0, log_epsilon_m_slope = 0,
#log_lambda_f_err = rep(0, no.basis-2), log_lambda_m_err = rep(0, no.basis-2),
#log_delta_f_err = rep(0, no.basis-2), log_delta_m_err = rep(0, no.basis-2),
#log_epsilon_f_err = rep(0, no.basis-2), log_epsilon_m_err = rep(0, no.basis-2)
#log_lambda_lambda_1_f = lambda.init, log_lambda_lambda_1_m = lambda.init,
#log_lambda_delta_1_f = lambda.init, log_lambda_delta_1_m = lambda.init,
#log_lambda_epsilon_1_f = lambda.init, log_lambda_epsilon_1_m = lambda.init
)
input.thiele.loghump.oag.vec.RW <- list(data = data.loghump.vec.RW, par_init = par.vec, model = "ccmpp_vr_tmb")
system.time(thiele.f.loghump.oag.RW.ori <- fit_tmb(input.thiele.loghump.oag.vec.RW,inner_verbose=TRUE, random = c("log_basepop_f","log_basepop_m",
"log_fx_spline_params",
"gx_f_spline_params","gx_m_spline_params",
"tp_params",
"log_phi_f_spline_params", "log_phi_m_spline_params",
"log_psi_f_spline_params", "log_psi_m_spline_params",
"log_lambda_f_spline_params", "log_lambda_m_spline_params",
"log_delta_f_spline_params", "log_delta_m_spline_params",
"log_epsilon_f_spline_params", "log_epsilon_m_spline_params",
"log_A_f_spline_params", "log_A_m_spline_params",
"log_B_f_spline_params", "log_B_m_spline_params"
),
DLL="ccmpp_bothsexes_thiele_loghump_oag_RW_originalscale_spline_RW_aggr_ARIMA_01rho",
map = list(log_tau2_logpop_f = factor(c(NA, 1)),
log_tau2_logpop_m = factor(c(NA, 1))
),
stepmin = 1e-10, stepmax = 1e-3
)
)
params <- list(
country = "Lesotho",
log_phi_hyperprec = 7.5, #mean log(precision) = 5 - log(2), mode sigma = 1/2 * 2/exp(5) = 1/exp(5)
log_psi_hyperprec = 7.5,
log_A_hyperprec = 7.5,
log_B_hyperprec = 7.5,
log_phi_hyperlambda = 5, # mean log(precision) = 5 - log(2), mode log(precision) = 0
log_psi_hyperlambda = 5,
log_lambda_hyperlambda = 5,
log_delta_hyperlambda = 5,
log_epsilon_hyperlambda = 5,
log_A_hyperlambda = 5,
log_B_hyperlambda = 5,
prec.init = 6-log(2),
lambda.init = 5-log(2),
no.basis = 30,
no.basis.fert = 14
)
data.loghump.vec.RW <- list(log_basepop_mean_f = log(basepop.f), log_basepop_mean_m = log(basepop.m),
log_fx_mean = log_fx_mean,
srb = rep(1.05, bf.idx1$n_periods),
interval = bf.idx1$interval,
n_periods = bf.idx1$n_periods,
fx_idx = bf.idx1$fx_idx,
n_fx = bf.idx1$n_fx,
census_log_pop_f = data.f, census_log_pop_m = data.m,
census_year_idx = match(bf.idx1$interval * floor(as.numeric(colnames(data.f)) / bf.idx1$interval), bf.idx1$periods_out),
#census_year_grow_idx = as.numeric(colnames(data.f)) - bf.idx1$interval * floor(as.numeric(colnames(data.f)) / bf.idx1$interval),
open_idx = bf.idx1$n_ages,
#oag = apply(data.f, 2, function(i){length(na.omit(i))}),
pop_start = rep(6, ncol(data.f)),
pop_end = ifelse(apply(data.f, 2, function(i){length(na.omit(i))})-1 > 75 + 1, 75 + 1, apply(data.f, 2, function(i){length(na.omit(i))})-1),
#pop_end = apply(data.f, 2, function(i){length(na.omit(i))})-1,
census_log_pop_f_5 = data.f.5, census_log_pop_m_5 = data.m.5,
census_year_idx_5 = match(bf.idx1$interval * floor(as.numeric(colnames(data.f.5)) / bf.idx1$interval), bf.idx1$periods_out),
census_year_group_idx_5 = bf.idx1$ages %/% 5 + 1,
n_agegrp_5 = bf.idx5$n_ages,
pop_start_5 = rep(2, ncol(data.f.5)),
pop_end_5 =  ifelse(apply(data.f.5, 2, function(i){length(na.omit(i))})-1 > 15, 15, apply(data.f.5, 2, function(i){length(na.omit(i))})-1),
df = bf5.f.no0.smooth$adjusted, dm = bf5.m.no0.smooth$adjusted,
Ef = bf5.f.no0.smooth$pyears2, Em = bf5.m.no0.smooth$pyears2,
df_age = bf5.f.no0.smooth$agegr + 1, dm_age = bf5.m.no0.smooth$agegr + 1,
df_time = match(bf5.f.no0.smooth$period, levels(bf5.f.no0.smooth$period)), dm_time = match(bf5.m.no0.smooth$period, levels(bf5.m.no0.smooth$period)),
df_tp = c(bf5.f.no0.smooth$tips)-1, dm_tp = c(bf5.m.no0.smooth$tips)-1,
log_phi_mean_f = log(thiele.loghump.prior.f[1,]), log_phi_mean_m = log(thiele.loghump.prior.m[1,]),
log_psi_mean_f = log(thiele.loghump.prior.f[2,]), log_psi_mean_m = log(thiele.loghump.prior.m[2,]),
log_lambda_mean_f = log(init_lambda_f), log_lambda_mean_m = log(init_lambda_m),
log_delta_mean_f = log(init_delta_f), log_delta_mean_m = log(init_delta_m),
log_epsilon_mean_f = log(init_epsilon_f), log_epsilon_mean_m = log(init_epsilon_m),
log_A_mean_f = log(thiele.loghump.prior.f[6,]), log_A_mean_m = log(thiele.loghump.prior.m[6,]),
log_B_mean_f = log(thiele.loghump.prior.f[7,]), log_B_mean_m = log(thiele.loghump.prior.m[7,]),
#log_lambda_mean_f = rep(log(0.005), bf.idx1$n_periods), log_lambda_mean_m = rep(log(0.008), bf.idx1$n_periods),
#log_delta_mean_f = rep(log(1.2), bf.idx1$n_periods), log_delta_mean_m = rep(log(1.2), bf.idx1$n_periods),
#log_epsilon_mean_f = rep(log(22), bf.idx1$n_periods), log_epsilon_mean_m = rep(log(25), bf.idx1$n_periods),
thiele_age = thiele_age,
penal_tp = as(crossprod(diff(diag(15))),"sparseMatrix"),
null_penal_tp = as(exp(15)*tcrossprod(c(0,1,1,1,rep(0,11))),"sparseMatrix"),
penal_tp_0 = as(tcrossprod(c(1,rep(0,14))),"sparseMatrix"),
penal_time = as(crossprod(diff(diag(no.basis), differences = 2)),"sparseMatrix"),
#penal_time_1 = as(crossprod(diff(diag(no.basis))),"sparseMatrix"),
null_penal_time = as(diag(no.basis),"sparseMatrix"),
#spline_params_timescale = 1:no.basis,
#spline_params_errmat = t(solve(tcrossprod(diff(diag(no.basis), differences=2)), diff(diag(no.basis), differences=2))),
penal_age_gx = diag(no.basis) %x% as(crossprod(diff(diag(no.basis))),"sparseMatrix"),
penal_time_gx = as(crossprod(diff(diag(no.basis))),"sparseMatrix") %x% diag(no.basis),
penal_agetime_gx = as(crossprod(diff(diag(no.basis))%x%diff(diag(no.basis))),"sparseMatrix"),
null_penal_gx = as(diag(no.basis * no.basis), "sparseMatrix"),
D_time = as(A.year, "sparseMatrix"),
D_agetime = as(te.spline, "sparseMatrix"),
D_agetime_fert = as(te.spline.fert, "sparseMatrix"),
log_phi_hypervar_prec = params$log_phi_hyperprec,
log_psi_hypervar_prec = params$log_psi_hyperprec,
log_A_hypervar_prec = params$log_A_hyperprec,
log_B_hypervar_prec = params$log_B_hyperprec,
log_phi_hyperlambda =  params$log_phi_hyperlambda,
log_psi_hyperlambda =  params$log_psi_hyperlambda,
log_lambda_hyperlambda =  params$log_lambda_hyperlambda,
log_delta_hyperlambda =  params$log_delta_hyperlambda,
log_epsilon_hyperlambda =  params$log_epsilon_hyperlambda,
log_A_hyperlambda =  params$log_A_hyperlambda,
log_B_hyperlambda =  params$log_B_hyperlambda
)
par.vec <- list(log_tau2_logpop_f = c(2,4), log_tau2_logpop_m = c(2,4),
log_tau2_fx = 3,
log_tau2_gx_f = 2, log_tau2_gx_m = 2,
log_lambda_gx_age_f = 5, log_lambda_gx_age_m = 5,
log_lambda_gx_time_f = 5, log_lambda_gx_time_m = 5,
log_lambda_gx_agetime_f = 5, log_lambda_gx_agetime_m = 5,
log_basepop_f = log(basepop.f), log_basepop_m = log(basepop.m),
log_fx_spline_params = rep(0, no.basis.fert * no.basis),
gx_f_spline_params = rep(0, no.basis*no.basis), gx_m_spline_params = rep(0, no.basis*no.basis),
log_lambda_tp = 1,
log_lambda_tp_0_inflated_sd = 0.3,
tp_params = rep(0,15),
log_dispersion_f = 1.3, log_dispersion_m = 1.3,
log_phi_f_spline_params = rep(0, no.basis), log_phi_m_spline_params = rep(0, no.basis),
log_psi_f_spline_params = rep(0, no.basis), log_psi_m_spline_params = rep(0, no.basis),
log_lambda_f_spline_params = rep(log(init_lambda_f), no.basis), log_lambda_m_spline_params = rep(log(init_lambda_m), no.basis),
log_delta_f_spline_params = rep(log(init_delta_f), no.basis), log_delta_m_spline_params = rep(log(init_delta_m), no.basis),
log_epsilon_f_spline_params = rep(log(init_epsilon_f), no.basis), log_epsilon_m_spline_params = rep(log(init_epsilon_m), no.basis),
#log_lambda_f_spline_params = rep(0, no.basis), log_lambda_m_spline_params = rep(0, no.basis),
#log_delta_f_spline_params = rep(0, no.basis), log_delta_m_spline_params = rep(0, no.basis),
#log_epsilon_f_spline_params = rep(0, no.basis), log_epsilon_m_spline_params = rep(0, no.basis),
log_A_f_spline_params = rep(0, no.basis), log_A_m_spline_params = rep(0, no.basis),
log_B_f_spline_params = rep(0, no.basis), log_B_m_spline_params = rep(0, no.basis),
log_marginal_prec_phi_f = prec.init, log_marginal_prec_phi_m = prec.init,
log_marginal_prec_psi_f = prec.init, log_marginal_prec_psi_m = prec.init,
log_marginal_prec_A_f = prec.init, log_marginal_prec_A_m = prec.init,
log_marginal_prec_B_f = prec.init, log_marginal_prec_B_m = prec.init,
log_lambda_phi_f = lambda.init, log_lambda_phi_m = lambda.init,
log_lambda_psi_f = lambda.init, log_lambda_psi_m = lambda.init,
log_lambda_lambda_f = lambda.init, log_lambda_lambda_m = lambda.init,
log_lambda_delta_f = lambda.init, log_lambda_delta_m = lambda.init,
log_lambda_epsilon_f = lambda.init, log_lambda_epsilon_m = lambda.init,
log_lambda_A_f = lambda.init, log_lambda_A_m = lambda.init,
log_lambda_B_f = lambda.init, log_lambda_B_m = lambda.init,
logit_lambda_slope_rho_f = 1, logit_lambda_slope_rho_m = 1,
logit_delta_slope_rho_f = 1, logit_delta_slope_rho_m = 1,
logit_epsilon_slope_rho_f = 1, logit_epsilon_slope_rho_m = 1
#log_lambda_f_intercept = log(init_lambda_f), log_lambda_m_intercept = log(init_lambda_m),
#log_delta_f_intercept = log(init_delta_f), log_delta_m_intercept = log(init_delta_m),
#log_epsilon_f_intercept = log(init_epsilon_f), log_epsilon_m_intercept = log(init_epsilon_m),
#log_lambda_f_slope = 0, log_lambda_m_slope = 0,
#log_delta_f_slope = 0, log_delta_m_slope = 0,
#log_epsilon_f_slope = 0, log_epsilon_m_slope = 0,
#log_lambda_f_err = rep(0, no.basis-2), log_lambda_m_err = rep(0, no.basis-2),
#log_delta_f_err = rep(0, no.basis-2), log_delta_m_err = rep(0, no.basis-2),
#log_epsilon_f_err = rep(0, no.basis-2), log_epsilon_m_err = rep(0, no.basis-2)
#log_lambda_lambda_1_f = lambda.init, log_lambda_lambda_1_m = lambda.init,
#log_lambda_delta_1_f = lambda.init, log_lambda_delta_1_m = lambda.init,
#log_lambda_epsilon_1_f = lambda.init, log_lambda_epsilon_1_m = lambda.init
)
input.thiele.loghump.oag.vec.RW <- list(data = data.loghump.vec.RW, par_init = par.vec, model = "ccmpp_vr_tmb")
system.time(thiele.f.loghump.oag.RW.ori <- fit_tmb(input.thiele.loghump.oag.vec.RW,inner_verbose=TRUE, random = c("log_basepop_f","log_basepop_m",
"log_fx_spline_params",
"gx_f_spline_params","gx_m_spline_params",
"tp_params",
"log_phi_f_spline_params", "log_phi_m_spline_params",
"log_psi_f_spline_params", "log_psi_m_spline_params",
"log_lambda_f_spline_params", "log_lambda_m_spline_params",
"log_delta_f_spline_params", "log_delta_m_spline_params",
"log_epsilon_f_spline_params", "log_epsilon_m_spline_params",
"log_A_f_spline_params", "log_A_m_spline_params",
"log_B_f_spline_params", "log_B_m_spline_params"
),
DLL="ccmpp_bothsexes_thiele_loghump_oag_RW_originalscale_spline_RW_aggr_ARIMA_01rho",
map = list(log_tau2_logpop_f = factor(c(NA, 1)),
log_tau2_logpop_m = factor(c(NA, 1))
),
stepmin = 1e-10, stepmax = 1e-3
)
)
params <- list(
country = "Lesotho",
log_phi_hyperprec = 7.5, #mean log(precision) = 5 - log(2), mode sigma = 1/2 * 2/exp(5) = 1/exp(5)
log_psi_hyperprec = 7.5,
log_A_hyperprec = 7.5,
log_B_hyperprec = 7.5,
log_phi_hyperlambda = 5, # mean log(precision) = 5 - log(2), mode log(precision) = 0
log_psi_hyperlambda = 5,
log_lambda_hyperlambda = 5,
log_delta_hyperlambda = 5,
log_epsilon_hyperlambda = 5,
log_A_hyperlambda = 5,
log_B_hyperlambda = 5,
prec.init = 3,
lambda.init = 1,
#prec.init = 6-log(2),
#lambda.init = 5-log(2),
no.basis = 30,
no.basis.fert = 14
)
data.loghump.vec.RW <- list(log_basepop_mean_f = log(basepop.f), log_basepop_mean_m = log(basepop.m),
log_fx_mean = log_fx_mean,
srb = rep(1.05, bf.idx1$n_periods),
interval = bf.idx1$interval,
n_periods = bf.idx1$n_periods,
fx_idx = bf.idx1$fx_idx,
n_fx = bf.idx1$n_fx,
census_log_pop_f = data.f, census_log_pop_m = data.m,
census_year_idx = match(bf.idx1$interval * floor(as.numeric(colnames(data.f)) / bf.idx1$interval), bf.idx1$periods_out),
#census_year_grow_idx = as.numeric(colnames(data.f)) - bf.idx1$interval * floor(as.numeric(colnames(data.f)) / bf.idx1$interval),
open_idx = bf.idx1$n_ages,
#oag = apply(data.f, 2, function(i){length(na.omit(i))}),
pop_start = rep(6, ncol(data.f)),
pop_end = ifelse(apply(data.f, 2, function(i){length(na.omit(i))})-1 > 75 + 1, 75 + 1, apply(data.f, 2, function(i){length(na.omit(i))})-1),
#pop_end = apply(data.f, 2, function(i){length(na.omit(i))})-1,
census_log_pop_f_5 = data.f.5, census_log_pop_m_5 = data.m.5,
census_year_idx_5 = match(bf.idx1$interval * floor(as.numeric(colnames(data.f.5)) / bf.idx1$interval), bf.idx1$periods_out),
census_year_group_idx_5 = bf.idx1$ages %/% 5 + 1,
n_agegrp_5 = bf.idx5$n_ages,
pop_start_5 = rep(2, ncol(data.f.5)),
pop_end_5 =  ifelse(apply(data.f.5, 2, function(i){length(na.omit(i))})-1 > 15, 15, apply(data.f.5, 2, function(i){length(na.omit(i))})-1),
df = bf5.f.no0.smooth$adjusted, dm = bf5.m.no0.smooth$adjusted,
Ef = bf5.f.no0.smooth$pyears2, Em = bf5.m.no0.smooth$pyears2,
df_age = bf5.f.no0.smooth$agegr + 1, dm_age = bf5.m.no0.smooth$agegr + 1,
df_time = match(bf5.f.no0.smooth$period, levels(bf5.f.no0.smooth$period)), dm_time = match(bf5.m.no0.smooth$period, levels(bf5.m.no0.smooth$period)),
df_tp = c(bf5.f.no0.smooth$tips)-1, dm_tp = c(bf5.m.no0.smooth$tips)-1,
log_phi_mean_f = log(thiele.loghump.prior.f[1,]), log_phi_mean_m = log(thiele.loghump.prior.m[1,]),
log_psi_mean_f = log(thiele.loghump.prior.f[2,]), log_psi_mean_m = log(thiele.loghump.prior.m[2,]),
log_lambda_mean_f = log(init_lambda_f), log_lambda_mean_m = log(init_lambda_m),
log_delta_mean_f = log(init_delta_f), log_delta_mean_m = log(init_delta_m),
log_epsilon_mean_f = log(init_epsilon_f), log_epsilon_mean_m = log(init_epsilon_m),
log_A_mean_f = log(thiele.loghump.prior.f[6,]), log_A_mean_m = log(thiele.loghump.prior.m[6,]),
log_B_mean_f = log(thiele.loghump.prior.f[7,]), log_B_mean_m = log(thiele.loghump.prior.m[7,]),
#log_lambda_mean_f = rep(log(0.005), bf.idx1$n_periods), log_lambda_mean_m = rep(log(0.008), bf.idx1$n_periods),
#log_delta_mean_f = rep(log(1.2), bf.idx1$n_periods), log_delta_mean_m = rep(log(1.2), bf.idx1$n_periods),
#log_epsilon_mean_f = rep(log(22), bf.idx1$n_periods), log_epsilon_mean_m = rep(log(25), bf.idx1$n_periods),
thiele_age = thiele_age,
penal_tp = as(crossprod(diff(diag(15))),"sparseMatrix"),
null_penal_tp = as(exp(15)*tcrossprod(c(0,1,1,1,rep(0,11))),"sparseMatrix"),
penal_tp_0 = as(tcrossprod(c(1,rep(0,14))),"sparseMatrix"),
penal_time = as(crossprod(diff(diag(no.basis), differences = 2)),"sparseMatrix"),
#penal_time_1 = as(crossprod(diff(diag(no.basis))),"sparseMatrix"),
null_penal_time = as(diag(no.basis),"sparseMatrix"),
#spline_params_timescale = 1:no.basis,
#spline_params_errmat = t(solve(tcrossprod(diff(diag(no.basis), differences=2)), diff(diag(no.basis), differences=2))),
penal_age_gx = diag(no.basis) %x% as(crossprod(diff(diag(no.basis))),"sparseMatrix"),
penal_time_gx = as(crossprod(diff(diag(no.basis))),"sparseMatrix") %x% diag(no.basis),
penal_agetime_gx = as(crossprod(diff(diag(no.basis))%x%diff(diag(no.basis))),"sparseMatrix"),
null_penal_gx = as(diag(no.basis * no.basis), "sparseMatrix"),
D_time = as(A.year, "sparseMatrix"),
D_agetime = as(te.spline, "sparseMatrix"),
D_agetime_fert = as(te.spline.fert, "sparseMatrix"),
log_phi_hypervar_prec = params$log_phi_hyperprec,
log_psi_hypervar_prec = params$log_psi_hyperprec,
log_A_hypervar_prec = params$log_A_hyperprec,
log_B_hypervar_prec = params$log_B_hyperprec,
log_phi_hyperlambda =  params$log_phi_hyperlambda,
log_psi_hyperlambda =  params$log_psi_hyperlambda,
log_lambda_hyperlambda =  params$log_lambda_hyperlambda,
log_delta_hyperlambda =  params$log_delta_hyperlambda,
log_epsilon_hyperlambda =  params$log_epsilon_hyperlambda,
log_A_hyperlambda =  params$log_A_hyperlambda,
log_B_hyperlambda =  params$log_B_hyperlambda
)
par.vec <- list(log_tau2_logpop_f = c(2,4), log_tau2_logpop_m = c(2,4),
log_tau2_fx = 3,
log_tau2_gx_f = 2, log_tau2_gx_m = 2,
log_lambda_gx_age_f = 5, log_lambda_gx_age_m = 5,
log_lambda_gx_time_f = 5, log_lambda_gx_time_m = 5,
log_lambda_gx_agetime_f = 5, log_lambda_gx_agetime_m = 5,
log_basepop_f = log(basepop.f), log_basepop_m = log(basepop.m),
log_fx_spline_params = rep(0, no.basis.fert * no.basis),
gx_f_spline_params = rep(0, no.basis*no.basis), gx_m_spline_params = rep(0, no.basis*no.basis),
log_lambda_tp = 1,
log_lambda_tp_0_inflated_sd = 0.3,
tp_params = rep(0,15),
log_dispersion_f = 1.3, log_dispersion_m = 1.3,
log_phi_f_spline_params = rep(0, no.basis), log_phi_m_spline_params = rep(0, no.basis),
log_psi_f_spline_params = rep(0, no.basis), log_psi_m_spline_params = rep(0, no.basis),
log_lambda_f_spline_params = rep(log(init_lambda_f), no.basis), log_lambda_m_spline_params = rep(log(init_lambda_m), no.basis),
log_delta_f_spline_params = rep(log(init_delta_f), no.basis), log_delta_m_spline_params = rep(log(init_delta_m), no.basis),
log_epsilon_f_spline_params = rep(log(init_epsilon_f), no.basis), log_epsilon_m_spline_params = rep(log(init_epsilon_m), no.basis),
#log_lambda_f_spline_params = rep(0, no.basis), log_lambda_m_spline_params = rep(0, no.basis),
#log_delta_f_spline_params = rep(0, no.basis), log_delta_m_spline_params = rep(0, no.basis),
#log_epsilon_f_spline_params = rep(0, no.basis), log_epsilon_m_spline_params = rep(0, no.basis),
log_A_f_spline_params = rep(0, no.basis), log_A_m_spline_params = rep(0, no.basis),
log_B_f_spline_params = rep(0, no.basis), log_B_m_spline_params = rep(0, no.basis),
log_marginal_prec_phi_f = prec.init, log_marginal_prec_phi_m = prec.init,
log_marginal_prec_psi_f = prec.init, log_marginal_prec_psi_m = prec.init,
log_marginal_prec_A_f = prec.init, log_marginal_prec_A_m = prec.init,
log_marginal_prec_B_f = prec.init, log_marginal_prec_B_m = prec.init,
log_lambda_phi_f = lambda.init, log_lambda_phi_m = lambda.init,
log_lambda_psi_f = lambda.init, log_lambda_psi_m = lambda.init,
log_lambda_lambda_f = lambda.init, log_lambda_lambda_m = lambda.init,
log_lambda_delta_f = lambda.init, log_lambda_delta_m = lambda.init,
log_lambda_epsilon_f = lambda.init, log_lambda_epsilon_m = lambda.init,
log_lambda_A_f = lambda.init, log_lambda_A_m = lambda.init,
log_lambda_B_f = lambda.init, log_lambda_B_m = lambda.init,
logit_lambda_slope_rho_f = 1, logit_lambda_slope_rho_m = 1,
logit_delta_slope_rho_f = 1, logit_delta_slope_rho_m = 1,
logit_epsilon_slope_rho_f = 1, logit_epsilon_slope_rho_m = 1
#log_lambda_f_intercept = log(init_lambda_f), log_lambda_m_intercept = log(init_lambda_m),
#log_delta_f_intercept = log(init_delta_f), log_delta_m_intercept = log(init_delta_m),
#log_epsilon_f_intercept = log(init_epsilon_f), log_epsilon_m_intercept = log(init_epsilon_m),
#log_lambda_f_slope = 0, log_lambda_m_slope = 0,
#log_delta_f_slope = 0, log_delta_m_slope = 0,
#log_epsilon_f_slope = 0, log_epsilon_m_slope = 0,
#log_lambda_f_err = rep(0, no.basis-2), log_lambda_m_err = rep(0, no.basis-2),
#log_delta_f_err = rep(0, no.basis-2), log_delta_m_err = rep(0, no.basis-2),
#log_epsilon_f_err = rep(0, no.basis-2), log_epsilon_m_err = rep(0, no.basis-2)
#log_lambda_lambda_1_f = lambda.init, log_lambda_lambda_1_m = lambda.init,
#log_lambda_delta_1_f = lambda.init, log_lambda_delta_1_m = lambda.init,
#log_lambda_epsilon_1_f = lambda.init, log_lambda_epsilon_1_m = lambda.init
)
input.thiele.loghump.oag.vec.RW <- list(data = data.loghump.vec.RW, par_init = par.vec, model = "ccmpp_vr_tmb")
system.time(thiele.f.loghump.oag.RW.ori <- fit_tmb(input.thiele.loghump.oag.vec.RW,inner_verbose=TRUE, random = c("log_basepop_f","log_basepop_m",
"log_fx_spline_params",
"gx_f_spline_params","gx_m_spline_params",
"tp_params",
"log_phi_f_spline_params", "log_phi_m_spline_params",
"log_psi_f_spline_params", "log_psi_m_spline_params",
"log_lambda_f_spline_params", "log_lambda_m_spline_params",
"log_delta_f_spline_params", "log_delta_m_spline_params",
"log_epsilon_f_spline_params", "log_epsilon_m_spline_params",
"log_A_f_spline_params", "log_A_m_spline_params",
"log_B_f_spline_params", "log_B_m_spline_params"
),
DLL="ccmpp_bothsexes_thiele_loghump_oag_RW_originalscale_spline_RW_aggr_ARIMA_01rho",
map = list(log_tau2_logpop_f = factor(c(NA, 1)),
log_tau2_logpop_m = factor(c(NA, 1))
),
stepmin = 1e-10, stepmax = 1e-3
)
)
par.vec <- list(log_tau2_logpop_f = c(2,3), log_tau2_logpop_m = c(2,3),
log_tau2_fx = 3,
log_tau2_gx_f = 2, log_tau2_gx_m = 2,
log_lambda_gx_age_f = 3, log_lambda_gx_age_m = 3,
log_lambda_gx_time_f = 3, log_lambda_gx_time_m = 3,
log_lambda_gx_agetime_f = 3, log_lambda_gx_agetime_m = 3,
log_basepop_f = log(basepop.f), log_basepop_m = log(basepop.m),
log_fx_spline_params = rep(0, no.basis.fert * no.basis),
gx_f_spline_params = rep(0, no.basis*no.basis), gx_m_spline_params = rep(0, no.basis*no.basis),
log_lambda_tp = 0,
log_lambda_tp_0_inflated_sd = 0,
tp_params = rep(0,15),
log_dispersion_f = 1.3, log_dispersion_m = 1.3,
log_phi_f_spline_params = rep(0, no.basis), log_phi_m_spline_params = rep(0, no.basis),
log_psi_f_spline_params = rep(0, no.basis), log_psi_m_spline_params = rep(0, no.basis),
log_lambda_f_spline_params = rep(log(init_lambda_f), no.basis), log_lambda_m_spline_params = rep(log(init_lambda_m), no.basis),
log_delta_f_spline_params = rep(log(init_delta_f), no.basis), log_delta_m_spline_params = rep(log(init_delta_m), no.basis),
log_epsilon_f_spline_params = rep(log(init_epsilon_f), no.basis), log_epsilon_m_spline_params = rep(log(init_epsilon_m), no.basis),
#log_lambda_f_spline_params = rep(0, no.basis), log_lambda_m_spline_params = rep(0, no.basis),
#log_delta_f_spline_params = rep(0, no.basis), log_delta_m_spline_params = rep(0, no.basis),
#log_epsilon_f_spline_params = rep(0, no.basis), log_epsilon_m_spline_params = rep(0, no.basis),
log_A_f_spline_params = rep(0, no.basis), log_A_m_spline_params = rep(0, no.basis),
log_B_f_spline_params = rep(0, no.basis), log_B_m_spline_params = rep(0, no.basis),
log_marginal_prec_phi_f = prec.init, log_marginal_prec_phi_m = prec.init,
log_marginal_prec_psi_f = prec.init, log_marginal_prec_psi_m = prec.init,
log_marginal_prec_A_f = prec.init, log_marginal_prec_A_m = prec.init,
log_marginal_prec_B_f = prec.init, log_marginal_prec_B_m = prec.init,
log_lambda_phi_f = lambda.init, log_lambda_phi_m = lambda.init,
log_lambda_psi_f = lambda.init, log_lambda_psi_m = lambda.init,
log_lambda_lambda_f = lambda.init, log_lambda_lambda_m = lambda.init,
log_lambda_delta_f = lambda.init, log_lambda_delta_m = lambda.init,
log_lambda_epsilon_f = lambda.init, log_lambda_epsilon_m = lambda.init,
log_lambda_A_f = lambda.init, log_lambda_A_m = lambda.init,
log_lambda_B_f = lambda.init, log_lambda_B_m = lambda.init,
logit_lambda_slope_rho_f = 1, logit_lambda_slope_rho_m = 1,
logit_delta_slope_rho_f = 1, logit_delta_slope_rho_m = 1,
logit_epsilon_slope_rho_f = 1, logit_epsilon_slope_rho_m = 1
#log_lambda_f_intercept = log(init_lambda_f), log_lambda_m_intercept = log(init_lambda_m),
#log_delta_f_intercept = log(init_delta_f), log_delta_m_intercept = log(init_delta_m),
#log_epsilon_f_intercept = log(init_epsilon_f), log_epsilon_m_intercept = log(init_epsilon_m),
#log_lambda_f_slope = 0, log_lambda_m_slope = 0,
#log_delta_f_slope = 0, log_delta_m_slope = 0,
#log_epsilon_f_slope = 0, log_epsilon_m_slope = 0,
#log_lambda_f_err = rep(0, no.basis-2), log_lambda_m_err = rep(0, no.basis-2),
#log_delta_f_err = rep(0, no.basis-2), log_delta_m_err = rep(0, no.basis-2),
#log_epsilon_f_err = rep(0, no.basis-2), log_epsilon_m_err = rep(0, no.basis-2)
#log_lambda_lambda_1_f = lambda.init, log_lambda_lambda_1_m = lambda.init,
#log_lambda_delta_1_f = lambda.init, log_lambda_delta_1_m = lambda.init,
#log_lambda_epsilon_1_f = lambda.init, log_lambda_epsilon_1_m = lambda.init
)
input.thiele.loghump.oag.vec.RW <- list(data = data.loghump.vec.RW, par_init = par.vec, model = "ccmpp_vr_tmb")
system.time(thiele.f.loghump.oag.RW.ori <- fit_tmb(input.thiele.loghump.oag.vec.RW,inner_verbose=TRUE, random = c("log_basepop_f","log_basepop_m",
"log_fx_spline_params",
"gx_f_spline_params","gx_m_spline_params",
"tp_params",
"log_phi_f_spline_params", "log_phi_m_spline_params",
"log_psi_f_spline_params", "log_psi_m_spline_params",
"log_lambda_f_spline_params", "log_lambda_m_spline_params",
"log_delta_f_spline_params", "log_delta_m_spline_params",
"log_epsilon_f_spline_params", "log_epsilon_m_spline_params",
"log_A_f_spline_params", "log_A_m_spline_params",
"log_B_f_spline_params", "log_B_m_spline_params"
),
DLL="ccmpp_bothsexes_thiele_loghump_oag_RW_originalscale_spline_RW_aggr_ARIMA_01rho",
map = list(log_tau2_logpop_f = factor(c(NA, 1)),
log_tau2_logpop_m = factor(c(NA, 1))
),
stepmin = 1e-10, stepmax = 1e-3
)
)
par.vec <- list(log_tau2_logpop_f = c(2,3), log_tau2_logpop_m = c(2,3),
log_tau2_fx = 3,
log_tau2_gx_f = 2, log_tau2_gx_m = 2,
log_lambda_gx_age_f = 3, log_lambda_gx_age_m = 3,
log_lambda_gx_time_f = 3, log_lambda_gx_time_m = 3,
log_lambda_gx_agetime_f = 3, log_lambda_gx_agetime_m = 3,
log_basepop_f = log(basepop.f), log_basepop_m = log(basepop.m),
log_fx_spline_params = rep(0, no.basis.fert * no.basis),
gx_f_spline_params = rep(0, no.basis*no.basis), gx_m_spline_params = rep(0, no.basis*no.basis),
log_lambda_tp = 0,
log_lambda_tp_0_inflated_sd = 0,
tp_params = rep(0,15),
log_dispersion_f = 0.5, log_dispersion_m = 0.5,
log_phi_f_spline_params = rep(0, no.basis), log_phi_m_spline_params = rep(0, no.basis),
log_psi_f_spline_params = rep(0, no.basis), log_psi_m_spline_params = rep(0, no.basis),
log_lambda_f_spline_params = rep(log(init_lambda_f), no.basis), log_lambda_m_spline_params = rep(log(init_lambda_m), no.basis),
log_delta_f_spline_params = rep(log(init_delta_f), no.basis), log_delta_m_spline_params = rep(log(init_delta_m), no.basis),
log_epsilon_f_spline_params = rep(log(init_epsilon_f), no.basis), log_epsilon_m_spline_params = rep(log(init_epsilon_m), no.basis),
#log_lambda_f_spline_params = rep(0, no.basis), log_lambda_m_spline_params = rep(0, no.basis),
#log_delta_f_spline_params = rep(0, no.basis), log_delta_m_spline_params = rep(0, no.basis),
#log_epsilon_f_spline_params = rep(0, no.basis), log_epsilon_m_spline_params = rep(0, no.basis),
log_A_f_spline_params = rep(0, no.basis), log_A_m_spline_params = rep(0, no.basis),
log_B_f_spline_params = rep(0, no.basis), log_B_m_spline_params = rep(0, no.basis),
log_marginal_prec_phi_f = prec.init, log_marginal_prec_phi_m = prec.init,
log_marginal_prec_psi_f = prec.init, log_marginal_prec_psi_m = prec.init,
log_marginal_prec_A_f = prec.init, log_marginal_prec_A_m = prec.init,
log_marginal_prec_B_f = prec.init, log_marginal_prec_B_m = prec.init,
log_lambda_phi_f = lambda.init, log_lambda_phi_m = lambda.init,
log_lambda_psi_f = lambda.init, log_lambda_psi_m = lambda.init,
log_lambda_lambda_f = lambda.init, log_lambda_lambda_m = lambda.init,
log_lambda_delta_f = lambda.init, log_lambda_delta_m = lambda.init,
log_lambda_epsilon_f = lambda.init, log_lambda_epsilon_m = lambda.init,
log_lambda_A_f = lambda.init, log_lambda_A_m = lambda.init,
log_lambda_B_f = lambda.init, log_lambda_B_m = lambda.init,
logit_lambda_slope_rho_f = 1, logit_lambda_slope_rho_m = 1,
logit_delta_slope_rho_f = 1, logit_delta_slope_rho_m = 1,
logit_epsilon_slope_rho_f = 1, logit_epsilon_slope_rho_m = 1
#log_lambda_f_intercept = log(init_lambda_f), log_lambda_m_intercept = log(init_lambda_m),
#log_delta_f_intercept = log(init_delta_f), log_delta_m_intercept = log(init_delta_m),
#log_epsilon_f_intercept = log(init_epsilon_f), log_epsilon_m_intercept = log(init_epsilon_m),
#log_lambda_f_slope = 0, log_lambda_m_slope = 0,
#log_delta_f_slope = 0, log_delta_m_slope = 0,
#log_epsilon_f_slope = 0, log_epsilon_m_slope = 0,
#log_lambda_f_err = rep(0, no.basis-2), log_lambda_m_err = rep(0, no.basis-2),
#log_delta_f_err = rep(0, no.basis-2), log_delta_m_err = rep(0, no.basis-2),
#log_epsilon_f_err = rep(0, no.basis-2), log_epsilon_m_err = rep(0, no.basis-2)
#log_lambda_lambda_1_f = lambda.init, log_lambda_lambda_1_m = lambda.init,
#log_lambda_delta_1_f = lambda.init, log_lambda_delta_1_m = lambda.init,
#log_lambda_epsilon_1_f = lambda.init, log_lambda_epsilon_1_m = lambda.init
)
input.thiele.loghump.oag.vec.RW <- list(data = data.loghump.vec.RW, par_init = par.vec, model = "ccmpp_vr_tmb")
system.time(thiele.f.loghump.oag.RW.ori <- fit_tmb(input.thiele.loghump.oag.vec.RW,inner_verbose=TRUE, random = c("log_basepop_f","log_basepop_m",
"log_fx_spline_params",
"gx_f_spline_params","gx_m_spline_params",
"tp_params",
"log_phi_f_spline_params", "log_phi_m_spline_params",
"log_psi_f_spline_params", "log_psi_m_spline_params",
"log_lambda_f_spline_params", "log_lambda_m_spline_params",
"log_delta_f_spline_params", "log_delta_m_spline_params",
"log_epsilon_f_spline_params", "log_epsilon_m_spline_params",
"log_A_f_spline_params", "log_A_m_spline_params",
"log_B_f_spline_params", "log_B_m_spline_params"
),
DLL="ccmpp_bothsexes_thiele_loghump_oag_RW_originalscale_spline_RW_aggr_ARIMA_01rho",
map = list(log_tau2_logpop_f = factor(c(NA, 1)),
log_tau2_logpop_m = factor(c(NA, 1))
),
stepmin = 1e-10, stepmax = 1e-3
)
)
getwd()
setwd("C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele spline 1 and 5 RData")
params$country
save(thiele.f.loghump.oag.RW.ori,file=paste0(params$country," spline ARIMA.RData"))
