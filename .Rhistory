cat(nlm$message,"\n")
return(setNames(exp(nlm$par), c("phi", "psi", "lambda", "delta", "epsilon", "A", "B")))
}
igme.h.mean.f <- igme.5q0.df %>% filter(Sex=="Female", year %in% bf.idx1$periods) %>% right_join(as_tibble(bf.idx1$periods)%>%mutate(year=value)) %>% .$child.mort %>% log()
h.mean.f <- wpp.5q0.interpolate %>% filter(Sex=="Female", year %in% bf.idx1$periods) %>% .$q50 %>% log() ##Using WPP 5q0 estimates
#thiele.prior.f <- sapply(h.mean.f, thiele.prior, sex="female")
thiele.loghump.prior.f <- sapply(h.mean.f, thiele.loghump.prior, sex="female")
igme.h.mean.m <- igme.5q0.df %>% filter(Sex=="Male", year %in% bf.idx1$periods) %>% right_join(as_tibble(bf.idx1$periods)%>%mutate(year=value)) %>% .$child.mort %>% log()
h.mean.m <- wpp.5q0.interpolate %>% filter(Sex=="Male", year %in% bf.idx1$periods) %>% .$q50 %>% log() ##Using WPP 5q0 estimates
#thiele.prior.m <- sapply(h.mean.m, thiele.prior, sex="male")
thiele.loghump.prior.m <- sapply(h.mean.m, thiele.loghump.prior, sex="male")
thiele_age <- 0.5:97.5
##DHS data cohort smoothed
bf5.smooth <- aggr.mat.cohort.0[[country]] %>%
filter(period %in% bf.idx1$periods) %>%
group_by(mm1, tips, DHS, agegr, period) %>%
summarise_at(vars(pyears, event, pyears2, adjusted), sum) %>%
ungroup()
bf5.smooth$period <- factor(bf5.smooth$period,levels=bf.idx1$periods)
bf5.smooth$tips <- factor(bf5.smooth$tips,levels=0:14)
dhs.start.age <- 15
dhs.end.age <- 59
bf5.f.no0.smooth <- bf5.smooth %>% filter(mm1=="female", agegr >= dhs.start.age, agegr <= dhs.end.age) %>% arrange(period,tips,agegr)
bf5.m.no0.smooth <- bf5.smooth %>% filter(mm1=="male", agegr >= dhs.start.age, agegr <= dhs.end.age) %>% arrange(period,tips,agegr)
basepop.f <- ifelse(pop.f.oag$`1960`==0, 1, pop.f.oag$'1960')
basepop.m <- ifelse(pop.m.oag$`1960`==0, 1, pop.m.oag$'1960')
data.f <- if(nrow(ddharm_bf_census_f)!=0) {as.matrix(log(ddharm_bf_census_f_oag[,-1]))} else {as.matrix(tibble(.rows=open.age+1))}; data.m <- if(nrow(ddharm_bf_census_m)!=0) {as.matrix(log(ddharm_bf_census_m_oag[,-1]))} else {as.matrix(tibble(.rows=open.age+1))}
data.f.5 <- if(!is.null(data.f)) {as.matrix(log(ddharm_bf_census_f_oag_5[,-1] %>% select(!matches(colnames(data.f)))))} else {as.matrix(log(ddharm_bf_census_f_oag_5[,-1]))}; data.m.5 <- if(!is.null(data.m)){as.matrix(log(ddharm_bf_census_m_oag_5[,-1] %>% select(!matches(colnames(data.f)))))} else {as.matrix(log(ddharm_bf_census_m_oag_5[,-1]))}
if(country == "Zimbabwe"){
data.f <- as.matrix(log(ddharm_bf_census_f_oag[,-(1:2)])); data.m <- as.matrix(log(ddharm_bf_census_m_oag[,-(1:2)]))
data.f.5 <- as.matrix(log(ddharm_bf_census_f_oag_5[,-(1:2)] %>% select(!matches(colnames(data.f))))); data.m.5 <- as.matrix(log(ddharm_bf_census_m_oag_5[,-(1:2)] %>% select(!matches(colnames(data.f)))))
}
init_lambda_f <- thiele.loghump.prior.f[3,1]; init_lambda_m <- thiele.loghump.prior.m[3,1];
init_delta_f <- thiele.loghump.prior.f[4,1]; init_delta_m <- thiele.loghump.prior.m[4,1];
init_epsilon_f <- thiele.loghump.prior.f[5,1]; init_epsilon_m <- thiele.loghump.prior.m[5,1];
#init_lambda_f <- 0.003; init_lambda_m <- 0.003;
#init_delta_f <- 0.3; init_delta_m <- 0.3;
#init_epsilon_f <- 22; init_epsilon_m <- 25;
full.penal.gx <- as(0.5 * diag(no.basis.time) %x% crossprod(diff(diag(no.basis.age),differences=1)) +
0.5 * crossprod(diff(diag(no.basis.time),differences=1)) %x% diag(no.basis.age) +
#0.5 * crossprod(diff(diag(no.basis.time))%x%diff(diag(no.basis.age))) +
1e-3 * diag(no.basis.time * no.basis.age), "sparseMatrix")
full.penal.fx <- as(0.5 * diag(no.basis.time) %x% crossprod(diff(diag(no.basis.fert))) +
0.5 * crossprod(diff(diag(no.basis.time))) %x% diag(no.basis.fert) +
1e-3 * diag(no.basis.time * no.basis.fert), "sparseMatrix")
#exp(15) * tcrossprod(rep(1, no.basis.time * no.basis.fert)), "sparseMatrix")
#full.penal.time <- as(crossprod(diff(diag(no.basis.time), differences = 2)) + 1e-3 * diag(no.basis.time),"sparseMatrix")
full.penal.time <- as(crossprod(diff(diag(no.basis.time), differences = 1)) + 1e-3 * diag(no.basis.time),"sparseMatrix")
gumbel.theta.fx <- -log(0.01) * sqrt(mean(diag(te.spline.fert %*% solve(full.penal.fx) %*% t(te.spline.fert)))) * 1.96 / log(1.2)
gumbel.theta.gx <- -log(0.01) *  sqrt(mean(diag(te.spline %*% solve(full.penal.gx) %*% t(te.spline)))) * 1.96 / 0.08
gumbel.theta.AR2.marginal.gx <- sqrt(mean(diag(tcrossprod(te.spline)))) * 1.96 / 0.08
gumbel.theta.phi <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(1.2)
gumbel.theta.psi <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(1.2)
gumbel.theta.A <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(1.2)
gumbel.theta.B <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(1.2)
gumbel.theta.lambda <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(4)
gumbel.theta.delta <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(4)
gumbel.theta.epsilon <- -log(0.01) * sqrt(mean(A.year %*% solve(full.penal.time) %*% t(A.year))) * 1.96 / log(4)
gumbel.theta.tp <- -log(0.01) * 1.96/1
loghump.models.list <- list("Thiele RW" = thiele.f.loghump.oag.RW.ori)
#plot tips####
tips.func <- function(x){
tp <- x$par.full %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + x$par.full %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + x$par.full %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}
tp.df <- as_tibble(tips.func(thiele.f.loghump.oag.RW.ori)) %>% mutate(tips = 0:14)
tp.var.df <-   as_tibble(t(apply(apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}), 1, quantile, c(0.025, 0.975)))) %>% mutate(tips = 0:14)
tp.df %>%
ggplot() + geom_line(aes(x = tips, y = value), lwd = 1.2, col="purple") +
coord_flip() + xlab("TiPS") +
geom_ribbon(data = tp.var.df, aes(x = tips, ymin = `2.5%`, ymax = `97.5%`), alpha=0.2, fill="purple") +
ggtitle(paste0(country, "Estimated TiPS")) +
theme(text = element_text(size=25), legend.key.size = unit(1.5,"cm"), strip.text = element_text(size=30),
plot.title = element_text(hjust = 0.5, face = "bold", size = 35))
#plot tips####
tips.func <- function(x){
tp <- x$par.full %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + x$par.full %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + x$par.full %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}
tp.df <- as_tibble(tips.func(thiele.f.loghump.oag.RW.ori)) %>% mutate(tips = 0:14)
#variance estimates####
rmvnorm_sparseprec <- function(n, mean = rep(0, nrow(prec)), prec = diag(lenth(mean))) {
z = matrix(rnorm(n * length(mean)), ncol = n)
L_inv = Matrix::Cholesky(prec)
v <- mean + Matrix::solve(as(L_inv, "pMatrix"), Matrix::solve(Matrix::t(as(L_inv, "Matrix")), z))
as.matrix(Matrix::t(v))
}
var.sample <- function(fit, nsample){
r <- fit$obj$env$random
par_f <- fit$par.full[-r]
par_r <- fit$par.full[r]
hess_r <- fit$obj$env$spHess(fit$par.full, random = TRUE)
smp_r <- rmvnorm_sparseprec(nsample, par_r, hess_r)
smp <- matrix(0, nsample, length(fit$par.full))
smp[ , r] <- smp_r
smp[ ,-r] <- matrix(par_f, nsample, length(par_f), byrow = TRUE)
colnames(smp) <- rep("NA", length(fit$par.full))
colnames(smp)[r] <- names(par_r)
colnames(smp)[-r] <- names(par_f)
smp
}
thiele.par.sim <- var.sample(thiele.f.loghump.oag.RW.ori, 1000)
thiele.var.sim <-  apply(thiele.par.sim, 1, thiele.f.loghump.oag.RW.ori$obj$report)
#plot tips####
tips.func <- function(x){
tp <- x$par.full %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + x$par.full %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + x$par.full %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}
tp.df <- as_tibble(tips.func(thiele.f.loghump.oag.RW.ori)) %>% mutate(tips = 0:14)
tp.var.df <-   as_tibble(t(apply(apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}), 1, quantile, c(0.025, 0.975)))) %>% mutate(tips = 0:14)
tp.df %>%
ggplot() + geom_line(aes(x = tips, y = value), lwd = 1.2, col="purple") +
coord_flip() + xlab("TiPS") +
geom_ribbon(data = tp.var.df, aes(x = tips, ymin = `2.5%`, ymax = `97.5%`), alpha=0.2, fill="purple") +
ggtitle(paste0(country, "Estimated TiPS")) +
theme(text = element_text(size=25), legend.key.size = unit(1.5,"cm"), strip.text = element_text(size=30),
plot.title = element_text(hjust = 0.5, face = "bold", size = 35))
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y - value), width=0.2, outlier.size=3, lwd=0.8)
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y = value), width=0.2, outlier.size=3, lwd=0.8)
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y = value), width=0.2, outlier.size=3, lwd=0.8) +
stat_boxplot(geom="errorbar",aes(col=kernel),position=position_dodge(0),lwd=0.8)+
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y = value), width=0.2, outlier.size=3, lwd=0.8) +
stat_boxplot(geom="errorbar",aes(col=kernel),position=position_dodge(0),lwd=0.8)
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y = value), width=0.2, outlier.size=3, lwd=0.8) +
stat_boxplot(geom="errorbar",aes(col=kernel),position=position_dodge(0),lwd=0.8)
tp.df %>%
ggplot() + geom_boxplot(aes(x = tips, y = value), width=0.2, outlier.size=3, lwd=0.8) +
stat_boxplot(geom="errorbar", position=position_dodge(0),lwd=0.8)
tp.df
tp.var.df
inner_join(tp.df, tp.var.df)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`), width=0.2, outlier.size=3, lwd=0.8)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = tips), width=0.2, outlier.size=3, lwd=0.8)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = tips), width=0.2, outlier.size=3, lwd=0.8) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = tips)) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = value)) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`)) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = tips)) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, xmin = `2.5%`, xmax = `97.5%`, group = tips)) +
coord_flip()
y
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, ymin = `2.5%`, ymax = `97.5%`, group = tips)) +
coord_flip()
inner_join(tp.df, tp.var.df)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xmin = `2.5%`, xmax = `97.5%`, group = tips)) +
coord_flip()
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xmin = `2.5%`, xmax = `97.5%`, group = tips))
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, lower = `2.5%`, upper = `97.5%`, group = tips))
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xlower = `2.5%`, xupper = `97.5%`, group = tips))
thiele.par.sim
apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
})
tp.all <- apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
})
tp.all
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xlower = `2.5%`, xupper = `97.5%`, group = tips), width=2)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xlower = `2.5%`, xupper = `97.5%`, group = tips), width=5)
inner_join(tp.df, tp.var.df) %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, xlower = `2.5%`, xupper = `97.5%`, group = tips), width=2)
#plot mort schedules vs DHS spline####
load("~/more countries final avg sex Rwanda.RData")
skip<-c("Ethiopia","Central African Republic","Comoros","Sao Tome and Principe","Botswana","Cape Verde","Equatorial Guinea","Eritrea","Nigeria (Ondo State)","Ghana","Mauritania","Sudan")
joint.countries<-names(aggr.mat.cohort.0)[!names(aggr.mat.cohort.0)%in%skip]
no.basis = 15
bspline<-function (x,k,i,m=2) {
if (m==-1) {basis<-as.numeric(x<k[i+1] & x>=k[i])} else {
z0<-(x-k[i])/(k[i+m+1]-k[i])
z1<-(k[i+m+2]-x)/(k[i+m+2]-k[i+1])
basis<-z0*bspline(x,k,i,m-1)+z1*bspline(x,k,i+1,m-1) }
basis
}
all.list<-function(x,age.start,age.end,year.start,year.end){
no.basis=no.basis
knots<-seq(0,1,length=no.basis-2)
dk<-knots[2]-knots[1]
knots<-c(knots[1]-dk*(3:1),knots,knots[no.basis-2]+dk*(1:3))
age<-seq(0,1,length=age.end-age.start+1)
year<-seq(0,1,length=year.end-year.start+1)
A.age<-c()
for(j in 1:no.basis) {
A.age<-cbind(A.age,bspline(age,knots,j))
}
A.year<-c()
for(j in 1:no.basis) {
A.year<-cbind(A.year,bspline(year,knots,j))
}
te.spline<-A.year%x%A.age
ind<-function(x){
aggr.mat.reduced<-x
data.mat.m<-aggr.mat.reduced[aggr.mat.reduced$mm1=="male" & aggr.mat.reduced$agegr %in% age.start:age.end & aggr.mat.reduced$period %in% year.start:year.end,c(7,5,3,2,4)]
data.mat.f<-aggr.mat.reduced[aggr.mat.reduced$mm1=="female" & aggr.mat.reduced$agegr %in% age.start:age.end & aggr.mat.reduced$period %in% year.start:year.end,c(7,5,3,2,4)]
age.start.col<-min(which(A.age[min(data.mat.m[,3])-age.start+1,]!=0))
age.end.col<-max(which(A.age[max(data.mat.m[,3])-age.start+1,]!=0))
year.start.col<-min(which(A.year[min(data.mat.m[,4])-year.start+1,]!=0))
year.end.col<-max(which(A.year[max(data.mat.m[,4])-year.start+1,]!=0))
age.start<-min(data.mat.m[,3])
age.end<-max(data.mat.m[,3])
year.start<-min(data.mat.m[,4])
year.end<-max(data.mat.m[,4])
tp<-max(data.mat.m[,5],data.mat.f[,5])
ind.place<-c(age.start.col,age.end.col,year.start.col,year.end.col,age.start,age.end,year.start,year.end,tp)
names(ind.place)<-c("age.start.col", "age.end.col","year.start.col","year.end.col","age.start","age.end","year.start","year.end","tp")
ind.place
}
everything.func<-function(i){
age.seq<-as.numeric(ind.list[[i]][["age.start"]]:ind.list[[i]][["age.end"]])
year.seq<-as.numeric(ind.list[[i]][["year.start"]]:ind.list[[i]][["year.end"]])
age.m<-A.age[age.seq-age.start+1,]%*%joint.countries.age.m[[i]]
age.f<-A.age[age.seq-age.start+1,]%*%joint.countries.age.f[[i]]
time.m<-A.year[year.seq-year.start+1,]%*%joint.countries.time.m[[i]]
time.f<-A.year[year.seq-year.start+1,]%*%joint.countries.time.f[[i]]
agetime.m<-matrix(te.spline[age.seq-age.start+1+rep((age.end-age.start+1)*(year.seq-year.start),each=length(age.seq)),]%*%joint.countries.2d.m[[i]],length(age.seq),length(year.seq))
agetime.f<-matrix(te.spline[age.seq-age.start+1+rep((age.end-age.start+1)*(year.seq-year.start),each=length(age.seq)),]%*%joint.countries.2d.f[[i]],length(age.seq),length(year.seq))
mort.m<-joint.countries.avg.m[[i]]+t(apply(apply(agetime.m,2,function(x){x+age.m}),1,function(x){x+time.m}))
mort.f<-joint.countries.avg.f[[i]]+t(apply(apply(agetime.f,2,function(x){x+age.f}),1,function(x){x+time.f}))
rownames(age.m)<-rownames(age.f)<-rownames(agetime.m)<-rownames(agetime.f)<-rownames(mort.m)<-rownames(mort.f)<-age.seq
rownames(time.m)<-rownames(time.f)<-colnames(agetime.m)<-colnames(agetime.f)<-colnames(mort.m)<-colnames(mort.f)<-year.seq
if(i=="Rwanda"){
mort.m[,4:6]<-mort.m[,4:6]+matrix(rep.par.list$rwanda_geno_m,56,3,byrow=T)
mort.f[,4:6]<-mort.f[,4:6]+matrix(rep.par.list$rwanda_geno_f,56,3,byrow=T)
}
tips<-joint.countries.tp.c[[i]]+tp.common
list(tp=tips,avg.m=joint.countries.avg.m[[i]],avg.f=joint.countries.avg.f[[i]],age.m=age.m,age.f=age.f,time.m=time.m,time.f=time.f,agetime.m=agetime.m,agetime.f=agetime.f,mort.m=mort.m,mort.f=mort.f)
}
ind.list<-lapply(aggr.mat.cohort.0[joint.countries],ind)
rep.par.list<-split(unname(x$env$last.par.best),names(x$env$last.par.best))
joint.countries.avg.m<-split(rep.par.list$avg_m,joint.countries)
joint.countries.avg.f<-split(rep.par.list$avg_f,joint.countries)
joint.countries.age.m<-split(rep.par.list$spline_params_m_age,rep(joint.countries,each=no.basis))
joint.countries.age.f<-split(rep.par.list$spline_params_f_age,rep(joint.countries,each=no.basis))
joint.countries.time.m<-split(rep.par.list$spline_params_m_time,rep(joint.countries,each=no.basis))
joint.countries.time.f<-split(rep.par.list$spline_params_f_time,rep(joint.countries,each=no.basis))
joint.countries.2d.m<-split(rep.par.list$spline_params_m_2d,rep(joint.countries,each=no.basis*no.basis))
joint.countries.2d.f<-split(rep.par.list$spline_params_f_2d,rep(joint.countries,each=no.basis*no.basis))
joint.countries.tp.c<-split(rep.par.list$tips_params,rep(joint.countries,each=length(rep.par.list$tips_params_common)))
tp.common<-rep.par.list$tips_params_common
tp.common[6]<-tp.common[6]+rep.par.list$tp_common_5
tp.common[11]<-tp.common[11]+rep.par.list$tp_common_10
setNames(lapply(joint.countries,everything.func),joint.countries)
}
more.countries.avg<-all.list(tmb.full.joint.common,age.start=10,age.end=65,year.start=1990,year.end=2017)
for(i in 1:length(more.countries.avg)){
more.countries.avg[[i]]$avg.m<-more.countries.avg[[i]]$avg.m+unname(tmb.full.joint.common$env$last.par.best["avg_common_m"])
more.countries.avg[[i]]$avg.f<-more.countries.avg[[i]]$avg.f+unname(tmb.full.joint.common$env$last.par.best["avg_common_f"])
more.countries.avg[[i]]$mort.m<-more.countries.avg[[i]]$mort.m+unname(tmb.full.joint.common$env$last.par.best["avg_common_m"])
more.countries.avg[[i]]$mort.f<-more.countries.avg[[i]]$mort.f+unname(tmb.full.joint.common$env$last.par.best["avg_common_f"])
}
thiele.loghump <- lapply(loghump.models.list, function(y){y$mode$mx_mat_f %>%
`colnames<-`(bf.idx1$periods) %>%
`rownames<-`(thiele_age - 0.5) %>%
reshape2::melt()}) %>%
map2(names(.), ~ add_column(.x, model = rep(.y, nrow(.x)))) %>%
bind_rows() %>%
setNames(c("age", "period", "value", "model")) %>%
mutate(sex = "female") %>%
bind_rows(
reshape2::melt(more.countries.avg[[country]]$mort.f) %>%
mutate(value = exp(value),
model = "Spline average",
sex = "female",
age = Var1,
period = Var2,
.keep ="none"
)
) %>%
bind_rows(
lapply(loghump.models.list, function(y){y$mode$mx_mat_m %>%
`colnames<-`(bf.idx1$periods) %>%
`rownames<-`(thiele_age - 0.5) %>%
reshape2::melt()}) %>%
map2(names(.), ~ add_column(.x, model = rep(.y, nrow(.x)))) %>%
bind_rows() %>%
setNames(c("age", "period", "value", "model")) %>%
mutate(sex = "male") %>%
bind_rows(
reshape2::melt(more.countries.avg[[country]]$mort.m) %>%
mutate(value = exp(value),
model = "Spline average",
sex = "male",
age = Var1,
period = Var2,
.keep ="none"
)
)
) %>%
mutate(model = str_wrap(model, 20),
hump = "log-Normal hump")
DHS.plot <- bf5.f.no0.smooth %>% mutate(value = adjusted / pyears2, period = as.numeric(levels(period)[period])) %>%
select(tips, agegr, period, value) %>%
mutate(sex = "female",
age = agegr) %>%
bind_rows(
bf5.m.no0.smooth %>% mutate(value = adjusted / pyears2, period = as.numeric(levels(period)[period])) %>%
select(tips, agegr, period, value) %>%
mutate(sex = "male",
age = agegr)
)
tips.list<-lapply(coef.list.cohort.kernel,function(x){y<-x$par.fixed[names(x$par.fixed)=="tips_params"];
y<-c(y[1:2],0,y[-(1:2)]);
c(y,rep(NA,15-length(y)))})
tips.mat<-as.data.frame(matrix(unlist(tips.list[!names(tips.list)%in%skip]),length(tips.list)-length(skip),15,byrow=T))
#plot Tips####
tp.df<-data.frame(sapply(more.countries.avg,function(x){exp(x$tp)}))
ggsave(filename="Tips.png",device="png",width=15.4686,height=8.898466667,unit="cm",scale=3.15,
plot=ggplot(cbind(stack(tp.df[,dist.order]),tp=rep(0:14,ncol(tp.df))))+geom_line(aes(x=tp,y=values,color=ind),size=1.2,alpha=0.65)+theme_bw()+
scale_color_manual(labels=str_wrap(joint.countries[dist.order],20),values=c(pal[round(dist.from.south.africa[joint.countries][dist.order][1:(length(joint.countries)-no.polygon)]*999/max(dist.from.south.africa[dist.from.south.africa!=Inf]))+1],rep("green",no.polygon)))+
ylab("Ratio relative to Tips=2")+xlab("Tips")+ggtitle("Tips")+coord_flip()+
theme(legend.position=c(0.875,0.2),legend.key = element_blank(),legend.background = element_blank(),legend.title = element_blank(),
legend.text=element_text(size=15),legend.key.width = unit(2,"cm"),legend.spacing.x = unit(1,"mm"),text = element_text(size=30),plot.title = element_text(hjust=0.5)))
tp.df<-data.frame(sapply(nb.fit.timesp.split,function(x){c(exp(x$tp[1:2]),1,exp(x$tp[-(1:2)]))}))
tp.all <- cbind(0:14, tp.all)
tp.all
reshape2::melt(tp.all)
tp.all <- apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
})
tp.all
nrow(tp.all)
tp.all <- cbind(0:14, tp.all)
reshape2::melt(tp.all)
tp.all <- apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
})
rownames(tp.all) <- 0:15
rownames(tp.all) <- 0:14
bf5.f.no0.smooth$tips
rownames(tp.all) <- 0:14
reshape2::melt(tp.all)
as_tibble(reshape2::melt(tp.all))
as_tibble(reshape2::melt(tp.all)) %>% select(tips = Var1)
apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14)
apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14) %>%
reshape2::melt() %>% as_tibble() %>%
tp.all <- apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14) %>%
reshape2::melt() %>% as_tibble() %>%
select(tips = Var1, sim = Var2, value - value)
apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14) %>%
reshape2::melt() %>% as_tibble() %>%
select(tips = Var1, sim = Var2, value - value)
apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14) %>%
reshape2::melt() %>% as_tibble()
tp.all <- apply(thiele.par.sim, 1, function(i){
tp <- i %>% split(names(.)) %>% .$tp_params
tp[6] <- tp[6] + i %>% split(names(.)) %>% .$tp_params_5
tp[11] <- tp[11] + i %>% split(names(.)) %>% .$tp_params_10
exp(tp)
}) %>%
`rownames<-`(0:14) %>%
reshape2::melt() %>% as_tibble() %>%
select(tips = Var1, sim = Var2, value = value)
tp.all
tp.all %>%
ggplot() + geom_boxplot(aes(x = tips, y = value, group = tips))
tp.all %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, group = tips))
tp.all %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, group = tips)) +
stat_boxplot(geom="errorbar", position=position_dodge(0), lwd=0.8)
tp.all %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, group = tips)) +
stat_boxplot(geom="errorbar")
tp.all %>%
ggplot() + geom_boxplot(aes(y = tips, x = value, group = tips)) +
stat_boxplot(geom="errorbar", aes(y = tips, x = value, group = tips), position=position_dodge(0), lwd=0.8)
tp.all %>%
ggplot() + stat_boxplot(geom="errorbar", aes(y = tips, x = value, group = tips), position=position_dodge(0), lwd=0.8) +
geom_boxplot(aes(y = tips, x = value, group = tips))
tp.all %>%
ggplot() + stat_boxplot(geom="errorbar", aes(y = tips, x = value, group = tips), position=position_dodge(0), lwd = 0.8) +
geom_boxplot(aes(y = tips, x = value, group = tips), lwd = 0.8)
tp.all %>%
ggplot() + stat_boxplot(geom="errorbar", aes(y = tips, x = value, group = tips), position=position_dodge(0), lwd = 0.8) +
geom_boxplot(aes(y = tips, x = value, group = tips), lwd = 0.8) +
ggtitle(paste0(country, "Estimated TiPS")) +
theme(text = element_text(size=25), legend.key.size = unit(1.5,"cm"), strip.text = element_text(size=30),
plot.title = element_text(hjust = 0.5, face = "bold", size = 35))
rm(list=ls())
load("~/cohort smooth 1900-2017.RData")
skip<-c("Ethiopia","Central African Republic","Comoros","Sao Tome and Principe","Botswana","Cape Verde","Equatorial Guinea","Eritrea","Nigeria (Ondo State)","Ghana","Mauritania","Sudan")
joint.countries<-names(aggr.mat.cohort.0)[!names(aggr.mat.cohort.0)%in%skip]
for(i in joint.countries[-11]){
tryCatch({
rmarkdown::render(
"C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_oag_RW_only_5-74_LQinit_spline_1_and_5_common_AR2.rmd",
params=list(country=i),
output_file= paste0(gsub("\\s|'","_",i),"_tau_Gumble.pdf"),
output_dir = "C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_RW_Gumbel_1_and_5_common_AR2/"
)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
}
for(i in joint.countries[-11]){
tryCatch({
rmarkdown::render(
"C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_oag_RW_only_5-74_LQinit_spline_1_and_5_common_sp.rmd",
params=list(country=i),
output_file= paste0(gsub("\\s|'","_",i),"_tau_Gumble.pdf"),
output_dir = "C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_RW_Gumbel_1_and_5_common_AR2/"
)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
}
for(i in joint.countries[-11]){
tryCatch({
rmarkdown::render(
"C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_oag_RW_only_5-74_LQinit_spline_1_and_5_common_sp.rmd",
params=list(country=i),
output_file= paste0(gsub("\\s|'","_",i),"_tau_Gumble.pdf"),
output_dir = "C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_RW_Gumbel_1_and_5_common_AR2/"
)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
}
load("~/cohort smooth 1900-2017.RData")
skip<-c("Ethiopia","Central African Republic","Comoros","Sao Tome and Principe","Botswana","Cape Verde","Equatorial Guinea","Eritrea","Nigeria (Ondo State)","Ghana","Mauritania","Sudan")
joint.countries<-names(aggr.mat.cohort.0)[!names(aggr.mat.cohort.0)%in%skip]
for(i in joint.countries[-11]){
tryCatch({
rmarkdown::render(
"C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_oag_RW_only_5-74_LQinit_spline_1_and_5_common_sp.rmd",
params=list(country=i),
output_file= paste0(gsub("\\s|'","_",i),"_tau_Gumble.pdf"),
output_dir = "C:/Users/ktang3/Desktop/Imperial/Pop_Construct/thiele_RW_Gumbel_1_and_5_common_AR2/"
)
},error=function(e){cat("ERROR :",conditionMessage(e), "\n")}
)
}
